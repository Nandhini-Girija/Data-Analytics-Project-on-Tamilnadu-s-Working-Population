# -*- coding: utf-8 -*-
"""FDA_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZGppuus696NVk1tgTNl-J7jNrwlSTsko
"""

# Normalization of the data set
import pandas as pd
import numpy as np
import sqlite3
# Read the DataSet
df=pd.read_csv('dataset.csv')
district_df=df[['District Code','Area Name']].copy()


# Creating the Database
conn = sqlite3.connect('Database.db')
df.to_sql('Census', conn, index=False, if_exists='replace')
query = 'SELECT * FROM Census'
df = pd.read_sql_query(query, conn)


# Data set is already in 1 Normal Form since there are no multivalued entries in the dataset
# Data set has Functional Dependencies
# Area name is dependent on the District code
# Creating a table with respect to District code and Area Name
conn = sqlite3.connect('Database.db')
district_df.to_sql('District', conn, index=False, if_exists='replace')

import pandas as pd
import numpy as np
import sqlite3



# Intial number of columns in the dataset
print(len(df.columns))

# Data Preprocessing
# Elliminating Columns which doesn't add any value to the dataset

# Checking the unique value in Table Code to find whether this column has any useful information

print(df['Table Code'].unique())
# Dropping the column Table code
df.drop(columns='Table Code', inplace=True)

# Checking the unique value in State Code to find whether this column has any useful information

print(df['State Code'].unique())
# Dropping the column State code
df.drop(columns='State Code', inplace=True)

# Checking the unique value in each column

print(df['District Code'].unique())
print(df['Area Name'].unique())

# Checking the relationship between the District code and Area Name
print(len(df['District Code'].unique()))
print(len(df['Area Name'].unique()))

# Checking for the different age groups
print(df['Age group'].unique())

# NaN is Age Group is mentioned as Age Not Stated
# Converting it to NaN and removing the rows having NaN in the Age Group
print(len(df[df['Age group']=='Age not stated']))
df.replace('Age not stated',np.NaN,inplace=True)
df.dropna(subset=['Age group'],axis=0, inplace=True)

# Age group column consist of an irrelevant entry in the context of the column which gives the total no of workers in each classification of district
# Creating the new dataframe elimating the rows consisting of age group= total
df=df[df['Age group']!='Total']


# Editing certain entries in the Age Group column to facilliate easy analyzation
df.replace('`5-9','5-9',inplace=True)
df.replace('`10-14','10-14',inplace=True)

# Converting age group as categorical data type
age_order = ['5-9', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40-49', '50-59', '60-69', '70-79', '80+']
df['Age group'] = pd.Categorical(df['Age group'], categories=age_order, ordered=True)


# Checking the unique values in age group column
print(df['Age group'].unique())
# Entries Available
print(len(df))


# Renaming the columns names for convinience
df.rename(columns={'Main Workers - Persons': 'Total Workers',
                   'Main Workers - Males':'Total Male Workers',
                   'Main Workers - Females':'Total Female Workers',
                   'Industrial Category - A - Cultivators - Persons':'A1- Total',
                   'Industrial Category - A - Cultivators - Males':'A1- Male',
                   'Industrial Category - A - Cultivators - Females':'A1- Female',
                   'Industrial Category - A - Agricultural labourers - Persons':'A2- Total',
                   'Industrial Category - A - Agricultural labourers - Males':'A2- Male',
                   'Industrial Category - A - Agricultural labourers - Female':'A2- Female',
                   'Industrial Category - A - Plantation, Livestock, Forestry, Fishing, Hunting and allied activities - Persons':'A3- Total',
       'Industrial Category - A - Plantation, Livestock, Forestry, Fishing, Hunting and allied activities - Males':'A3- Male',
       'Industrial Category - A - Plantation, Livestock, Forestry, Fishing, Hunting and allied activities - Females':'A3- Female',
       'Industrial Category - B - Persons':'B- Total', 'Industrial Category - B - Males':'B- Male',
       'Industrial Category - B - Females':'B- Female',
       'Industrial Category - C - HHI - Persons':'C1- Total',
       'Industrial Category - C - HHI - Males':'C1- Male',
       'Industrial Category - C - HHI - Females':'C1- Female',
       'Industrial Category - C - Non HHI - Persons':'C2- Total',
       'Industrial Category - C - Non HHI - Males':'C2- Male',
       'Industrial Category - C - Non HHI - Females':'C2- Female',
       'Industrial Category - D & E - Persons':'D- Total',
       'Industrial Category - D & E - Males':'D- Male',
       'Industrial Category - D & E - Females':'D- Female',
       'Industrial Category - F - Persons':'E-Total',
       'Industrial Category - F - Males':'E- Male',
       'Industrial Category - F - Females':'E- Female',
       'Industrial Category - G - HHI - Persons':'F1- Total',
       'Industrial Category - G - HHI - Males':'F1- Male',
       'Industrial Category - G - HHI - Females':'F1- Female',
       'Industrial Category - G - Non HHI - Persons':'F2- Total',
       'Industrial Category - G - Non HHI - Males':'F2- Male',
       'Industrial Category - G - Non HHI - Females':'F2- Female',
       'Industrial Category - H - Persons':'G- Total',
        'Industrial Category - H - Males':'G- Male',
       'Industrial Category - H - Females':'G- Female',
       'Industrial Category - I - Persons':'H- Total',
       'Industrial Category - I - Males':'H- Male',
       'Industrial Category - I - Females':'H- Female',
       'Industrial Category - J - HHI - Persons':'I1- Total',
       'Industrial Category - J - HHI - Males':'I1- Male',
       'Industrial Category - J - HHI - Females':'I1- Female',
       'Industrial Category - J - Non HHI - Persons':'I2- Total',
       'Industrial Category - J - Non HHI - Males':'I2- Male',
       'Industrial Category - J - Non HHI - Females':'I2- Female',
       'Industrial Category - K to M - Persons':'J- Total',
       'Industrial Category - K to M - Males':'J- Male',
       'Industrial Category - K to M - Females':'J- Female',
       'Industrial Category - N to O - Persons':'K- Total',
       'Industrial Category - N to O - Males':'K- Male',
       'Industrial Category - N to O - Females':'K- Female',
       'Industrial Category - P to Q - Persons':'L- Total',
       'Industrial Category - P to Q - Males':'L- Male',
       'Industrial Category - P to Q - Females':'L- Female',
       'Industrial Category - R to U - HHI - Persons':'M1- Total',
       'Industrial Category - R to U - HHI - Males':'M1- Male',
       'Industrial Category - R to U - HHI - Females':'M1- Female',
       'Industrial Category - R to U - Non HHI - Persons':'M2- Total',
       'Industrial Category - R to U - Non HHI - Males':'M2- Male',
       'Industrial Category - R to U - Non HHI - Females':'M2- Female'
  }, inplace=True)
df.rename(columns={'Industrial Category - A - Agricultural labourers - Females':'A2- Female'},inplace=True)


print(df.columns)
#print(df.head(10))
#print(len(df.columns))
#Normalizing the given dataset
District_df=df[['District Code','Area Name']].copy()
District_df.drop_duplicates(inplace=True)
District_df=District_df.set_index(np.arange(0,33,1))
#print(District_df)



for dist in District_df['District Code']:
   census_tables = df[df['District Code'] == dist].copy()
   census_tables.drop(columns=['District Code'],inplace=True)
   columns_to_be_analysed=['Total Workers', 'Total Male Workers', 'Total Female Workers',
       'A1- Total', 'A1- Male', 'A1- Female', 'A2- Total', 'A2- Male',
       'A2- Female',
       'A3- Total', 'A3- Male', 'A3- Female', 'B- Total', 'B- Male',
       'B- Female', 'C1- Total', 'C1- Male', 'C1- Female', 'C2- Total',
       'C2- Male', 'C2- Female', 'D- Total', 'D- Male', 'D- Female', 'E-Total',
       'E- Male', 'E- Female', 'F1- Total', 'F1- Male', 'F1- Female',
       'F2- Total', 'F2- Male', 'F2- Female', 'G- Total', 'G- Male',
       'G- Female', 'H- Total', 'H- Male', 'H- Female', 'I1- Total',
       'I1- Male', 'I1- Female', 'I2- Total', 'I2- Male', 'I2- Female',
       'J- Total', 'J- Male', 'J- Female', 'K- Total', 'K- Male', 'K- Female',
       'L- Total', 'L- Male', 'L- Female', 'M1- Total', 'M1- Male',
       'M1- Female', 'M2- Total', 'M2- Male', 'M2- Female']

   i=0
   while(i<len(columns_to_be_analysed)):
    a=census_tables.pivot_table([columns_to_be_analysed[i],columns_to_be_analysed[i+1],columns_to_be_analysed[i+2]],index=['Total/ Rural/ Urban'],columns='Age group')
    i=i+3
    if(i+3>=len(columns_to_be_analysed)):
      break
    #print(columns_to_be_analysed[i],columns_to_be_analysed[i+1],columns_to_be_analysed[i+2])
    #print(a.head(20))

# Task 1
# Visualization of Gender Distribution of Workers in the State on the whole across various age group
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame
state_df=df[df['District Code']=='`000']
# Select relevant columns for the heatmap
heatmap_columns = ['Total Male Workers', 'Total Female Workers']

# Create a new DataFrame with only the selected columns
heatmap_df = state_df[['Age group','Total/ Rural/ Urban'] + heatmap_columns]
heatmap_df=heatmap_df[heatmap_df['Total/ Rural/ Urban']!='Total']
#print(heatmap_df)

# Pivot the DataFrame to create a suitable format for a heatmap
heatmap_data = heatmap_df.pivot_table(index='Age group', columns=['Total/ Rural/ Urban'], values=heatmap_columns)

# Create a heatmap using Seaborn
plt.figure(figsize=(12, 8))
heatmap=sns.heatmap(heatmap_data, annot=True, fmt='.0f', cmap='YlGnBu', cbar_kws={'label': 'Count'})
heatmap.add_patch(plt.Rectangle((0, 0), 2, 1, fill=False, edgecolor='red', lw=3))
heatmap.add_patch(plt.Rectangle((2, 0), 2, 1, fill=False, edgecolor='red', lw=3))
heatmap.add_patch(plt.Rectangle((0, 1), 2, 1, fill=False, edgecolor='red', lw=3))
heatmap.add_patch(plt.Rectangle((2, 1), 2, 1, fill=False, edgecolor='red', lw=3))
plt.text(6, 0.5, 'Highlighted regions represent Child Labour', color='black', ha='center', va='center', fontsize=12)

plt.title('Heatmap of Total- Male workers and Total- Female Workers in the State Across Age Groups')
plt.xlabel('Region whether urban or rural')
plt.ylabel('Age Group of the Workers')
plt.show()

# Task 2
# Gender Distribution across Various Industry Sectors in the each District of the State
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
industry_mapping={'A1- Total':'Cultivators','A2- Total':'Agricultural Labours','A3- Total':'Plantation Livestock and Fishing',  'B- Total':'Mining and Quarying Industry',
                    'C1- Total':'HHI Manufacturing Industry', 'C2- Total':'Non-HHI Manufacturing Industry', 'D- Total':'Electricity, Gas and Water Supply, Sewage Management Sector',
                    'E-Total':'Construction Industry','F1- Total':'HHI Wholesale and Retail Trade Sector', 'F2- Total':'Non-HHI Wholesale and Retail Trade Sector',
                    'G- Total':'Transportation and Storage Industry','H- Total':'Accomodation and Food Service Sector',  'I1- Total':'HHI Information and Communication Sector',
  'I2- Total':'HHI Information and Communication Sector', 'J- Total':'Financial,Real Estate and Insurance Sector', 'K- Total':'Public Administration, Support and Defence',
                    'L- Total':'Education Human Health and NGO', 'M1- Total':'HHI Art, Entertainment and Recreation','M2- Total':'Non-HHI Art, Entertainment and Recreation' }

for dist in District_df['Area Name']:
   census_tables = df[df['Area Name'] == dist].copy()
   census_tables.drop(columns=['District Code'],inplace=True)
   columns_to_be_analysed=['Total Workers', 'Total Male Workers', 'Total Female Workers',
       'A1- Total', 'A1- Male', 'A1- Female', 'A2- Total', 'A2- Male',
       'A2- Female',
       'A3- Total', 'A3- Male', 'A3- Female', 'B- Total', 'B- Male',
       'B- Female', 'C1- Total', 'C1- Male', 'C1- Female', 'C2- Total',
       'C2- Male', 'C2- Female', 'D- Total', 'D- Male', 'D- Female', 'E-Total',
       'E- Male', 'E- Female', 'F1- Total', 'F1- Male', 'F1- Female',
       'F2- Total', 'F2- Male', 'F2- Female', 'G- Total', 'G- Male',
       'G- Female', 'H- Total', 'H- Male', 'H- Female', 'I1- Total',
       'I1- Male', 'I1- Female', 'I2- Total', 'I2- Male', 'I2- Female',
       'J- Total', 'J- Male', 'J- Female', 'K- Total', 'K- Male', 'K- Female',
       'L- Total', 'L- Male', 'L- Female', 'M1- Total', 'M1- Male',
       'M1- Female', 'M2- Total', 'M2- Male', 'M2- Female']

   census_tables=census_tables[census_tables['Total/ Rural/ Urban']!='Total']
   i=0
   while(i<len(columns_to_be_analysed)):
    a=census_tables.pivot_table([columns_to_be_analysed[i+1],columns_to_be_analysed[i+2]],columns=['Total/ Rural/ Urban'],index='Age group')

    i=i+3
    plt.figure(figsize=(12,8))
    h=sns.heatmap(a, annot=True, fmt='.0f', cmap='YlGnBu', cbar_kws={'label': 'Count'})
    h.add_patch(plt.Rectangle((0, 0), 2, 1, fill=False, edgecolor='red', lw=3))
    h.add_patch(plt.Rectangle((2, 0), 2, 1, fill=False, edgecolor='red', lw=3))
    h.add_patch(plt.Rectangle((0, 1), 2, 1, fill=False, edgecolor='red', lw=3))
    h.add_patch(plt.Rectangle((2, 1), 2, 1, fill=False, edgecolor='red', lw=3))
    plt.text(6, 0.5, 'Highlighted regions represent Child Labour', color='black', ha='center', va='center', fontsize=12)
    industry_name=industry_mapping[columns_to_be_analysed[i]]
    plt.title(f'Heatmap of {industry_name} in the {dist} Across Gender and Age Groups')
    plt.xlabel('Area of the State')
    plt.ylabel('Age Group of the Workers')
    plt.show()
    if(i+3>=len(columns_to_be_analysed)):
      break
    #print(a.head(20))

# Task 3
# Visualizing Gender and Age distribution of the total number of workers in the state categorized as rural and urban region
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame
state_df = df[df['District Code'] == '`000']

# Select relevant columns for the heatmap
heatmap_columns = ['Total Male Workers', 'Total Female Workers']

# Create a new DataFrame with only the selected columns
heatmap_df = state_df[['Age group', 'Total/ Rural/ Urban'] + heatmap_columns]
heatmap_df = heatmap_df[heatmap_df['Total/ Rural/ Urban'] != 'Total']
heatmap_df1=heatmap_df[heatmap_df['Total/ Rural/ Urban'] != 'Urban']
heatmap_df2=heatmap_df[heatmap_df['Total/ Rural/ Urban'] != 'Rural']
# Pivot the DataFrame to create a suitable format for a heatmap
heatmap_data1= heatmap_df1.pivot_table(index='Age group', columns=['Total/ Rural/ Urban'], values=heatmap_columns)
heatmap_data2= heatmap_df2.pivot_table(index='Age group', columns=['Total/ Rural/ Urban'], values=heatmap_columns)


melted_data1 = pd.melt(heatmap_df1, id_vars=['Age group'], value_vars=['Total Male Workers', 'Total Female Workers'],
                      var_name='Gender', value_name='Count')
melted_data2 = pd.melt(heatmap_df2, id_vars=['Age group'], value_vars=['Total Male Workers', 'Total Female Workers'],
                      var_name='Gender', value_name='Count')
plt.figure(figsize=(12,12))
plt.subplot(1,2,1),
sns.barplot(x='Age group', y='Count',hue='Gender',data=melted_data1, palette='YlGnBu')
plt.title('Rural')
plt.tight_layout()

plt.subplot(1,2,2)
sns.barplot(x='Age group', y='Count',hue='Gender',data=melted_data2, palette='YlGnBu')
plt.title('Urban')
plt.tight_layout()


plt.show()


# Task 4
# Pie chart for Gender distribution in the state categorized as Urban and rural

# Set up the subplots
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Pie chart for Rural
rural_counts = melted_data1.groupby('Gender')['Count'].sum()
axes[0].pie(rural_counts, labels=rural_counts.index, autopct='%1.1f%%', startangle=90, colors=['skyblue', 'lightcoral'])
axes[0].set_title('Gender Distribution in the State-Rural')

# Pie chart for Urban
urban_counts = melted_data2.groupby('Gender')['Count'].sum()
axes[1].pie(urban_counts, labels=urban_counts.index, autopct='%1.1f%%', startangle=90, colors=['skyblue', 'lightcoral'])
axes[1].set_title('Gender Distribution in the State-Urban')

# Equal aspect ratio ensures that pie is drawn as a circle.
axes[0].axis('equal')
axes[1].axis('equal')

# Add legends
axes[0].legend(rural_counts.index, loc='upper right')
axes[1].legend(urban_counts.index, loc='upper right')
plt.tight_layout()
# Display the plot
plt.show()

# Task 5
# Pie char for Age Distribution in the state categorized as Urban and Rural


# Assuming melted_data1 and melted_data2 are DataFrames with appropriate data

# Set up the subplots
fig, axes = plt.subplots(1, 2, figsize=(20, 20))

# Pie chart for Rural
rural_age_distribution = melted_data1.groupby('Age group')['Count'].sum()
colors_rural = sns.color_palette('pastel', n_colors=len(rural_age_distribution))
axes[0].pie(rural_age_distribution, labels=rural_age_distribution.index, autopct='%1.1f%%', startangle=90,
            wedgeprops=dict(width=0.4), pctdistance=0.85, colors=colors_rural)
axes[0].set_title('Age Distribution in the State-Rural')
plt.tight_layout()

# Pie chart for Urban
urban_age_distribution = melted_data2.groupby('Age group')['Count'].sum()
colors_urban = sns.color_palette('pastel', n_colors=len(urban_age_distribution))
axes[1].pie(urban_age_distribution, labels=urban_age_distribution.index, autopct='%1.1f%%', startangle=90,
            wedgeprops=dict(width=0.4), pctdistance=0.85, colors=colors_urban)
axes[1].set_title('Age Distribution in the State-Urban')

# Equal aspect ratio ensures that pie is drawn as a circle.
axes[0].axis('equal')
axes[1].axis('equal')

# Add legends with clean layout
axes[0].legend(loc='upper left', bbox_to_anchor=(1, 1), title='Age Group')
axes[1].legend(loc='upper left', bbox_to_anchor=(1, 1), title='Age Group')
plt.tight_layout()

# Display the plot
plt.show()

# Task 6
# Gender Distribution and Age Distribution across the different industry in different district categorized as Rural and Urban

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
industry_mapping={'Total Workers':'Total Workers','A1- Total':'Cultivators','A2- Total':'Agricultural Labours','A3- Total':'Plantation Livestock and Fishing',  'B- Total':'Mining and Quarying Industry',
                    'C1- Total':'HHI Manufacturing Industry', 'C2- Total':'Non-HHI Manufacturing Industry', 'D- Total':'Electricity, Gas and Water Supply, Sewage Management Sector',
                    'E-Total':'Construction Industry','F1- Total':'HHI Wholesale and Retail Trade Sector', 'F2- Total':'Non-HHI Wholesale and Retail Trade Sector',
                    'G- Total':'Transportation and Storage Industry','H- Total':'Accomodation and Food Service Sector',  'I1- Total':'HHI Information and Communication Sector',
  'I2- Total':'HHI Information and Communication Sector', 'J- Total':'Financial,Real Estate and Insurance Sector', 'K- Total':'Public Administration, Support and Defence',
                    'L- Total':'Education Human Health and NGO', 'M1- Total':'HHI Art, Entertainment and Recreation','M2- Total':'Non-HHI Art, Entertainment and Recreation' }

for dist in District_df['Area Name']:
   census_tables = df[df['Area Name'] == dist].copy()
   census_tables.drop(columns=['District Code'],inplace=True)
   columns_to_be_analysed=['Total Workers', 'Total Male Workers', 'Total Female Workers',
       'A1- Total', 'A1- Male', 'A1- Female', 'A2- Total', 'A2- Male',
       'A2- Female',
       'A3- Total', 'A3- Male', 'A3- Female', 'B- Total', 'B- Male',
       'B- Female', 'C1- Total', 'C1- Male', 'C1- Female', 'C2- Total',
       'C2- Male', 'C2- Female', 'D- Total', 'D- Male', 'D- Female', 'E-Total',
       'E- Male', 'E- Female', 'F1- Total', 'F1- Male', 'F1- Female',
       'F2- Total', 'F2- Male', 'F2- Female', 'G- Total', 'G- Male',
       'G- Female', 'H- Total', 'H- Male', 'H- Female', 'I1- Total',
       'I1- Male', 'I1- Female', 'I2- Total', 'I2- Male', 'I2- Female',
       'J- Total', 'J- Male', 'J- Female', 'K- Total', 'K- Male', 'K- Female',
       'L- Total', 'L- Male', 'L- Female', 'M1- Total', 'M1- Male',
       'M1- Female', 'M2- Total', 'M2- Male', 'M2- Female']

   census_tables=census_tables[census_tables['Total/ Rural/ Urban']!='Total']
   heatmap_df1=census_tables[census_tables['Total/ Rural/ Urban'] != 'Urban']
   heatmap_df2=census_tables[census_tables['Total/ Rural/ Urban'] != 'Rural']
   i=0
   while(i<len(columns_to_be_analysed)):
    a1=heatmap_df1.pivot_table([columns_to_be_analysed[i+1],columns_to_be_analysed[i+2]],columns=['Total/ Rural/ Urban'],index='Age group')
    a2=heatmap_df2.pivot_table([columns_to_be_analysed[i+1],columns_to_be_analysed[i+2]],columns=['Total/ Rural/ Urban'],index='Age group')
    plt.figure(figsize=(14,14))
    plt.subplot(1,2,1),
    h1=sns.heatmap(data=heatmap_data1, annot=True, fmt='.0f', cmap='YlGnBu', cbar_kws={'label': 'Count'})
    plt.title(f'Rural-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}')

    h1.add_patch(plt.Rectangle((0, 0), 2, 1, fill=False, edgecolor='red', lw=3))
    h1.add_patch(plt.Rectangle((2, 0), 2, 1, fill=False, edgecolor='red', lw=3))
    h1.add_patch(plt.Rectangle((0, 1), 2, 1, fill=False, edgecolor='red', lw=3))
    h1.add_patch(plt.Rectangle((2, 1), 2, 1, fill=False, edgecolor='red', lw=3))
    plt.xlabel('Gender')
    plt.ylabel('Age Group')
    plt.tight_layout()

    plt.subplot(1,2,2)
    h2=sns.heatmap(data=heatmap_data2, annot=True, fmt='.0f', cmap='YlGnBu', cbar_kws={'label': 'Count'})
    plt.title(f'Urban-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}')

    h2.add_patch(plt.Rectangle((0, 0), 2, 1, fill=False, edgecolor='red', lw=3))
    h2.add_patch(plt.Rectangle((2, 0), 2, 1, fill=False, edgecolor='red', lw=3))
    h2.add_patch(plt.Rectangle((0, 1), 2, 1, fill=False, edgecolor='red', lw=3))
    h2.add_patch(plt.Rectangle((2, 1), 2, 1, fill=False, edgecolor='red', lw=3))
    plt.xlabel('Gender')
    plt.ylabel('Age Group')
    plt.tight_layout()

    plt.show()

    i=i+3

    plt.show()
    if(i+3>=len(columns_to_be_analysed)):
      break
    #print(a.head(20))

# Task 7
# Gender Distribution and Age Distribution across the different industry in different district categorized as Rural and Urban

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import seaborn.objects as so
industry_mapping={'Total Workers':'Total Workers','A1- Total':'Cultivators','A2- Total':'Agricultural Labours','A3- Total':'Plantation Livestock and Fishing',  'B- Total':'Mining and Quarying Industry',
                    'C1- Total':'HHI Manufacturing Industry', 'C2- Total':'Non-HHI Manufacturing Industry', 'D- Total':'Electricity, Gas and Water Supply, Sewage Management Sector',
                    'E-Total':'Construction Industry','F1- Total':'HHI Wholesale and Retail Trade Sector', 'F2- Total':'Non-HHI Wholesale and Retail Trade Sector',
                    'G- Total':'Transportation and Storage Industry','H- Total':'Accomodation and Food Service Sector',  'I1- Total':'HHI Information and Communication Sector',
  'I2- Total':'HHI Information and Communication Sector', 'J- Total':'Financial,Real Estate and Insurance Sector', 'K- Total':'Public Administration, Support and Defence',
                    'L- Total':'Education Human Health and NGO', 'M1- Total':'HHI Art, Entertainment and Recreation','M2- Total':'Non-HHI Art, Entertainment and Recreation' }

for dist in District_df['Area Name']:
   census_tables = df[df['Area Name'] == dist].copy()
   census_tables.drop(columns=['District Code'],inplace=True)
   columns_to_be_analysed=['Total Workers', 'Total Male Workers', 'Total Female Workers',
       'A1- Total', 'A1- Male', 'A1- Female', 'A2- Total', 'A2- Male',
       'A2- Female',
       'A3- Total', 'A3- Male', 'A3- Female', 'B- Total', 'B- Male',
       'B- Female', 'C1- Total', 'C1- Male', 'C1- Female', 'C2- Total',
       'C2- Male', 'C2- Female', 'D- Total', 'D- Male', 'D- Female', 'E-Total',
       'E- Male', 'E- Female', 'F1- Total', 'F1- Male', 'F1- Female',
       'F2- Total', 'F2- Male', 'F2- Female', 'G- Total', 'G- Male',
       'G- Female', 'H- Total', 'H- Male', 'H- Female', 'I1- Total',
       'I1- Male', 'I1- Female', 'I2- Total', 'I2- Male', 'I2- Female',
       'J- Total', 'J- Male', 'J- Female', 'K- Total', 'K- Male', 'K- Female',
       'L- Total', 'L- Male', 'L- Female', 'M1- Total', 'M1- Male',
       'M1- Female', 'M2- Total', 'M2- Male', 'M2- Female']

   census_tables=census_tables[census_tables['Total/ Rural/ Urban']!='Total']
   heatmap_df1=census_tables[census_tables['Total/ Rural/ Urban'] != 'Urban']
   heatmap_df2=census_tables[census_tables['Total/ Rural/ Urban'] != 'Rural']

   i=0
   while(i<len(columns_to_be_analysed)):
    melted_data1 = pd.melt(heatmap_df1, id_vars=['Age group'], value_vars=[columns_to_be_analysed[i+1],columns_to_be_analysed[i+2]],
                      var_name='Gender', value_name='Count')
    melted_data2 = pd.melt(heatmap_df2, id_vars=['Age group'], value_vars=[columns_to_be_analysed[i+1],columns_to_be_analysed[i+2]],
                      var_name='Gender', value_name='Count')
    print(melted_data1.head(5))

    so.Plot(melted_data1, x='Age group',y='Count',color='Gender').add(so.Bar(alpha=0.2),so.Dodge()).add(so.Line(color='red'), so.PolyFit()).label(title=f'Rural-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}',legend='KDE').facet('Gender',wrap=1).show()

 #   plt.figure(figsize=(12,12))
  #  plt.subplot(1,2,1),
   # sns.barplot(x='Age group', y='Count',hue='Gender',data=melted_data1, palette='YlGnBu')
    #plt.title(f'Rural-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}')
    #plt.tight_layout()

#    plt.subplot(1,2,2)
    so.Plot(melted_data2, x='Age group',y='Count',color='Gender').add(so.Bar(alpha=0.2),so.Dodge()).add(so.Line(color='red'), so.PolyFit()).label(title=f'Urban-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}',legend='KDE').facet('Gender',wrap=1).show()
    #so.barplot(x='Age group', y='Count',hue='Gender',data=melted_data2, palette='YlGnBu')
    #plt.title(f'Urban-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}')
    #plt.tight_layout()

    #plt.show()

    i=i+3


    if(i+3>=len(columns_to_be_analysed)):
      break
    #print(a.head(20))

# Task 7
# Gender Distribution across the different industry in different district categorized as Rural and Urban

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
industry_mapping={'Total Workers':'Total Workers','A1- Total':'Cultivators','A2- Total':'Agricultural Labours','A3- Total':'Plantation Livestock and Fishing',  'B- Total':'Mining and Quarying Industry',
                    'C1- Total':'HHI Manufacturing Industry', 'C2- Total':'Non-HHI Manufacturing Industry', 'D- Total':'Electricity, Gas and Water Supply, Sewage Management Sector',
                    'E-Total':'Construction Industry','F1- Total':'HHI Wholesale and Retail Trade Sector', 'F2- Total':'Non-HHI Wholesale and Retail Trade Sector',
                    'G- Total':'Transportation and Storage Industry','H- Total':'Accomodation and Food Service Sector',  'I1- Total':'HHI Information and Communication Sector',
  'I2- Total':'HHI Information and Communication Sector', 'J- Total':'Financial,Real Estate and Insurance Sector', 'K- Total':'Public Administration, Support and Defence',
                    'L- Total':'Education Human Health and NGO', 'M1- Total':'HHI Art, Entertainment and Recreation','M2- Total':'Non-HHI Art, Entertainment and Recreation' }

for dist in District_df['Area Name']:
   census_tables = df[df['Area Name'] == dist].copy()
   census_tables.drop(columns=['District Code'],inplace=True)
   columns_to_be_analysed=['Total Workers', 'Total Male Workers', 'Total Female Workers',
       'A1- Total', 'A1- Male', 'A1- Female', 'A2- Total', 'A2- Male',
       'A2- Female',
       'A3- Total', 'A3- Male', 'A3- Female', 'B- Total', 'B- Male',
       'B- Female', 'C1- Total', 'C1- Male', 'C1- Female', 'C2- Total',
       'C2- Male', 'C2- Female', 'D- Total', 'D- Male', 'D- Female', 'E-Total',
       'E- Male', 'E- Female', 'F1- Total', 'F1- Male', 'F1- Female',
       'F2- Total', 'F2- Male', 'F2- Female', 'G- Total', 'G- Male',
       'G- Female', 'H- Total', 'H- Male', 'H- Female', 'I1- Total',
       'I1- Male', 'I1- Female', 'I2- Total', 'I2- Male', 'I2- Female',
       'J- Total', 'J- Male', 'J- Female', 'K- Total', 'K- Male', 'K- Female',
       'L- Total', 'L- Male', 'L- Female', 'M1- Total', 'M1- Male',
       'M1- Female', 'M2- Total', 'M2- Male', 'M2- Female']

   census_tables=census_tables[census_tables['Total/ Rural/ Urban']!='Total']
   heatmap_df1=census_tables[census_tables['Total/ Rural/ Urban'] != 'Urban']
   heatmap_df2=census_tables[census_tables['Total/ Rural/ Urban'] != 'Rural']

   i=0
   while(i<len(columns_to_be_analysed)):
    melted_data1 = pd.melt(heatmap_df1, id_vars=['Age group'], value_vars=[columns_to_be_analysed[i+1],columns_to_be_analysed[i+2]],
                      var_name='Gender', value_name='Count')
    melted_data2 = pd.melt(heatmap_df2, id_vars=['Age group'], value_vars=[columns_to_be_analysed[i+1],columns_to_be_analysed[i+2]],
                      var_name='Gender', value_name='Count')

        # Check for zero values in the data
    if melted_data1['Count'].eq(0).all() or melted_data2['Count'].eq(0).all():
      print(f"All values are zero for {dist}, skipping pie chart generation.")
    else:
      # Set up the subplots
      fig, axes = plt.subplots(1, 2, figsize=(14, 10))

      # Pie chart for Rural
      rural_counts = melted_data1.groupby('Gender')['Count'].sum()
      if not rural_counts.eq(0).all():
        axes[0].pie(rural_counts, labels=rural_counts.index, autopct='%1.1f%%', startangle=90, colors=['skyblue', 'lightcoral'])
        axes[0].set_title(f'Rural-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}')
        plt.tight_layout()

      #Pie chart for Urban
      urban_counts = melted_data2.groupby('Gender')['Count'].sum()
      if not urban_counts.eq(0).all():
        axes[1].pie(urban_counts, labels=urban_counts.index, autopct='%1.1f%%', startangle=90, colors=['skyblue', 'lightcoral'])
        axes[1].set_title(f'Urban-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}')
        plt.tight_layout()

      #Equal aspect ratio ensures that pie is drawn as a circle.
      axes[0].axis('equal')
      axes[1].axis('equal')

      # Add legends

      axes[0].legend(rural_counts.index, loc='upper right')
      axes[1].legend(urban_counts.index, loc='upper right')

      # Display the plot
      plt.show()

      i = i + 3

      if(i + 3 >= len(columns_to_be_analysed)):
        break

# Task 8
# Age Distribution across the different industry in different district categorized as Rural and Urban

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

industry_mapping = {'Total Workers': 'Total Workers', 'A1- Total': 'Cultivators', 'A2- Total': 'Agricultural Labours',
                    'A3- Total': 'Plantation Livestock and Fishing', 'B- Total': 'Mining and Quarrying Industry',
                    'C1- Total': 'HHI Manufacturing Industry', 'C2- Total': 'Non-HHI Manufacturing Industry',
                    'D- Total': 'Electricity, Gas and Water Supply, Sewage Management Sector',
                    'E-Total': 'Construction Industry', 'F1- Total': 'HHI Wholesale and Retail Trade Sector',
                    'F2- Total': 'Non-HHI Wholesale and Retail Trade Sector',
                    'G- Total': 'Transportation and Storage Industry', 'H- Total': 'Accommodation and Food Service Sector',
                    'I1- Total': 'HHI Information and Communication Sector',
                    'I2- Total': 'HHI Information and Communication Sector',
                    'J- Total': 'Financial, Real Estate and Insurance Sector',
                    'K- Total': 'Public Administration, Support and Defence',
                    'L- Total': 'Education Human Health and NGO', 'M1- Total': 'HHI Art, Entertainment and Recreation',
                    'M2- Total': 'Non-HHI Art, Entertainment and Recreation'}

for dist in District_df['Area Name']:
    census_tables = df[df['Area Name'] == dist].copy()
    census_tables.drop(columns=['District Code'], inplace=True)
    columns_to_be_analysed = ['Total Workers', 'Total Male Workers', 'Total Female Workers',
                              'A1- Total', 'A1- Male', 'A1- Female', 'A2- Total', 'A2- Male',
                              'A2- Female',
                              'A3- Total', 'A3- Male', 'A3- Female', 'B- Total', 'B- Male',
                              'B- Female', 'C1- Total', 'C1- Male', 'C1- Female', 'C2- Total',
                              'C2- Male', 'C2- Female', 'D- Total', 'D- Male', 'D- Female', 'E-Total',
                              'E- Male', 'E- Female', 'F1- Total', 'F1- Male', 'F1- Female',
                              'F2- Total', 'F2- Male', 'F2- Female', 'G- Total', 'G- Male',
                              'G- Female', 'H- Total', 'H- Male', 'H- Female', 'I1- Total',
                              'I1- Male', 'I1- Female', 'I2- Total', 'I2- Male', 'I2- Female',
                              'J- Total', 'J- Male', 'J- Female', 'K- Total', 'K- Male', 'K- Female',
                              'L- Total', 'L- Male', 'L- Female', 'M1- Total', 'M1- Male',
                              'M1- Female', 'M2- Total', 'M2- Male', 'M2- Female']

    census_tables = census_tables[census_tables['Total/ Rural/ Urban'] != 'Total']
    heatmap_df1 = census_tables[census_tables['Total/ Rural/ Urban'] != 'Urban']
    heatmap_df2 = census_tables[census_tables['Total/ Rural/ Urban'] != 'Rural']

    i = 0
    while i < len(columns_to_be_analysed):
        melted_data1 = pd.melt(heatmap_df1, id_vars=['Age group'],
                               value_vars=[columns_to_be_analysed[i + 1], columns_to_be_analysed[i + 2]],
                               var_name='Gender', value_name='Count')
        melted_data2 = pd.melt(heatmap_df2, id_vars=['Age group'],
                               value_vars=[columns_to_be_analysed[i + 1], columns_to_be_analysed[i + 2]],
                               var_name='Gender', value_name='Count')
        # Combine age groups 5-9 and 9-14 into a single category
        melted_data1['Age group'] = melted_data1['Age group'].replace({'5-9': '5-14'})
        melted_data2['Age group'] = melted_data2['Age group'].replace({'5-9': '5-14'})

        # Set up the subplots
        fig, axes = plt.subplots(1, 2, figsize=(14, 10))

        # Define a custom color palette for each age group
        age_group_palette = sns.color_palette('pastel', n_colors=len(census_tables['Age group'].unique()))

        # Pie chart for Rural
        rural_age_distribution = melted_data1.groupby('Age group')['Count'].sum()
        if not rural_age_distribution.eq(0).all():
            colors_rural = [age_group_palette[i] for i, group in enumerate(rural_age_distribution.index)]
            explode_rural1 = [0.2 if group == '20-24' else 0 for group in rural_age_distribution.index]
            #explode_rural2= [0.2 if group == '5-14' else 0 for group in rural_age_distribution.index]

            axes[0].pie(rural_age_distribution, labels=rural_age_distribution.index, autopct='%1.1f%%', startangle=90,
                        wedgeprops=dict(width=0.4), pctdistance=0.85, colors=colors_rural, explode=explode_rural1)

            axes[0].set_title(f'Rural-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}')
            plt.tight_layout()

        # Pie chart for Urban
        urban_age_distribution = melted_data2.groupby('Age group')['Count'].sum()
        if not urban_age_distribution.eq(0).all():
            colors_urban = [age_group_palette[i] for i, group in enumerate(urban_age_distribution.index)]
            explode_urban = [0.2 if group == '20-24' else 0 for group in urban_age_distribution.index]

            axes[1].pie(urban_age_distribution, labels=urban_age_distribution.index, autopct='%1.1f%%', startangle=90,
                        wedgeprops=dict(width=0.4), pctdistance=0.85, colors=colors_urban, explode=explode_urban)
            axes[1].set_title(f'Urban-{dist} Industry-{industry_mapping[columns_to_be_analysed[i]]}')
            plt.tight_layout()

        # Equal aspect ratio ensures that pie is drawn as a circle.
        axes[0].axis('equal')
        axes[1].axis('equal')

        # Add legends with a clean layout
        axes[0].legend(loc='upper left', bbox_to_anchor=(1, 1), title='Age Group')
        axes[1].legend(loc='upper left', bbox_to_anchor=(1, 1), title='Age Group')

        # Display the plot
        plt.show()
        i = i + 3

        if i + 3 >= len(columns_to_be_analysed):
            break

# Task 9
# Working Population pyramid for each industry in each district categorized as urban and rural
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


industry_mapping = {'Total Workers': 'Total Workers', 'A1- Total': 'Cultivators', 'A2- Total': 'Agricultural Labours',
                    'A3- Total': 'Plantation Livestock and Fishing', 'B- Total': 'Mining and Quarrying Industry',
                    'C1- Total': 'HHI Manufacturing Industry', 'C2- Total': 'Non-HHI Manufacturing Industry',
                    'D- Total': 'Electricity, Gas and Water Supply, Sewage Management Sector',
                    'E-Total': 'Construction Industry', 'F1- Total': 'HHI Wholesale and Retail Trade Sector',
                    'F2- Total': 'Non-HHI Wholesale and Retail Trade Sector',
                    'G- Total': 'Transportation and Storage Industry', 'H- Total': 'Accommodation and Food Service Sector',
                    'I1- Total': 'HHI Information and Communication Sector',
                    'I2- Total': 'HHI Information and Communication Sector',
                    'J- Total': 'Financial, Real Estate and Insurance Sector',
                    'K- Total': 'Public Administration, Support and Defence',
                    'L- Total': 'Education Human Health and NGO', 'M1- Total': 'HHI Art, Entertainment and Recreation',
                    'M2- Total': 'Non-HHI Art, Entertainment and Recreation'}
columns_to_be_analysed = ['Total Workers', 'Total Male Workers', 'Total Female Workers',
                              'A1- Total', 'A1- Male', 'A1- Female', 'A2- Total', 'A2- Male',
                              'A2- Female',
                              'A3- Total', 'A3- Male', 'A3- Female', 'B- Total', 'B- Male',
                              'B- Female', 'C1- Total', 'C1- Male', 'C1- Female', 'C2- Total',
                              'C2- Male', 'C2- Female', 'D- Total', 'D- Male', 'D- Female', 'E-Total',
                              'E- Male', 'E- Female', 'F1- Total', 'F1- Male', 'F1- Female',
                              'F2- Total', 'F2- Male', 'F2- Female', 'G- Total', 'G- Male',
                              'G- Female', 'H- Total', 'H- Male', 'H- Female', 'I1- Total',
                              'I1- Male', 'I1- Female', 'I2- Total', 'I2- Male', 'I2- Female',
                              'J- Total', 'J- Male', 'J- Female', 'K- Total', 'K- Male', 'K- Female',
                              'L- Total', 'L- Male', 'L- Female', 'M1- Total', 'M1- Male',
                              'M1- Female', 'M2- Total', 'M2- Male', 'M2- Female']
# Loop over each district
for dist in District_df['Area Name']:
    census_tables = df[df['Area Name'] == dist].copy()
    census_tables.drop(columns=['District Code'], inplace=True)
    i=0
    # Loop over each industry
    while(i<len(columns_to_be_analysed)):
        industry_columns = [columns_to_be_analysed[i],columns_to_be_analysed[i+1],columns_to_be_analysed[i+2],'Total/ Rural/ Urban','Age group']

        # Filter data for the current industry
        industry_data = census_tables[industry_columns]

        # Separate data for rural and urban
        rural_data = industry_data[industry_data['Total/ Rural/ Urban'] != 'Urban']
        urban_data = industry_data[industry_data['Total/ Rural/ Urban'] != 'Rural']

        # Create population pyramid for rural
        plt.figure(figsize=(10, 6))

        # Plot male population (left side of the pyramid)
        plt.barh(rural_data['Age group'], rural_data[columns_to_be_analysed[i+1]], color='#9ecae1', label='Male', edgecolor='#9ecae1')
        # Plot female population (right side of the pyramid)
        plt.barh(rural_data['Age group'], -rural_data[columns_to_be_analysed[i+2]], color='#fdae6b', label='Female', edgecolor='#fdae6b')

        plt.title(f'Population Pyramid for {industry_mapping[columns_to_be_analysed[i]]} in Rural {dist}')
        plt.xlabel('Population Count')
        plt.ylabel('Age Group')
        plt.legend()
        plt.show()

        # Create population pyramid for urban
        plt.figure(figsize=(10, 6))

        # Plot male population (left side of the pyramid)
        plt.barh(urban_data['Age group'], urban_data[columns_to_be_analysed[i+1]], color='#9ecae1', label='Male', edgecolor='#9ecae1')
        # Plot female population (right side of the pyramid)
        plt.barh(urban_data['Age group'], -urban_data[columns_to_be_analysed[i+2]], color='#fdae6b', label='Female', edgecolor='#fdae6b')

        plt.title(f'Population Pyramid for {industry_mapping[columns_to_be_analysed[i]]} in Urban {dist}')
        plt.xlabel('Population Count')
        plt.ylabel('Age Group')
        plt.legend()
        plt.show()
        i=i+3
        if(i>=len(columns_to_be_analysed)):
          break

# Task 10
# Analysing the age group 20-24 in various industry of each district
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

industry_mapping = {'Total Workers': 'Total Workers', 'A1- Total': 'Cultivators', 'A2- Total': 'Agricultural Labours',
                    'A3- Total': 'Plantation Livestock and Fishing', 'B- Total': 'Mining and Quarrying Industry',
                    'C1- Total': 'HHI Manufacturing Industry', 'C2- Total': 'Non-HHI Manufacturing Industry',
                    'D- Total': 'Electricity, Gas and Water Supply, Sewage Management Sector',
                    'E-Total': 'Construction Industry', 'F1- Total': 'HHI Wholesale and Retail Trade Sector',
                    'F2- Total': 'Non-HHI Wholesale and Retail Trade Sector',
                    'G- Total': 'Transportation and Storage Industry', 'H- Total': 'Accommodation and Food Service Sector',
                    'I1- Total': 'HHI Information and Communication Sector',
                    'I2- Total': 'HHI Information and Communication Sector',
                    'J- Total': 'Financial, Real Estate and Insurance Sector',
                    'K- Total': 'Public Administration, Support and Defence',
                    'L- Total': 'Education Human Health and NGO', 'M1- Total': 'HHI Art, Entertainment and Recreation',
                    'M2- Total': 'Non-HHI Art, Entertainment and Recreation'}
columns_to_be_analysed = ['Total Workers', 'Total Male Workers', 'Total Female Workers',
                           'A1- Male', 'A1- Female',  'A2- Male',
                          'A2- Female',
                           'A3- Male', 'A3- Female',  'B- Male',
                          'B- Female',  'C1- Male', 'C1- Female', 'C2- Male', 'C2- Female',
                          'D- Male', 'D- Female', 'E- Male', 'E- Female',  'F1- Male', 'F1- Female',
                           'F2- Male', 'F2- Female', 'G- Male',
                          'G- Female',  'H- Male', 'H- Female',
                          'I1- Male', 'I1- Female',  'I2- Male', 'I2- Female',
                           'J- Male', 'J- Female',  'K- Male', 'K- Female',
                           'L- Male', 'L- Female',  'M1- Male',
                          'M1- Female',  'M2- Male', 'M2- Female']

# Loop over each district
for dist in District_df['Area Name']:
    census_tables = df[df['Area Name'] == dist].copy()
    census_tables.drop(columns=['District Code'], inplace=True)

    # Filter data for the age group 20-24
    age_group_data = census_tables[census_tables['Age group'] == '20-24']
    age_group_data = age_group_data[age_group_data['Total/ Rural/ Urban'] != 'Total']

    # Melt the data for easy plotting with seaborn
    industry_data_melted = pd.melt(age_group_data, id_vars=['Total/ Rural/ Urban', 'Age group'],
                                   value_vars=columns_to_be_analysed[3:],
                                   var_name='Industry', value_name='Population Count')

    # Plot using seaborn
    plt.figure(figsize=(12, 8))
    sns.barplot(x='Population Count', y='Industry', hue='Total/ Rural/ Urban', data=industry_data_melted, palette='Set2')
    plt.title(f'Working Population (Age 20-24) in Various Industries - {dist}')
    plt.xlabel('Population Count')
    plt.ylabel('Industry')
    plt.legend(title='Urban/Rural')
    plt.tight_layout()
    plt.show()

# Task 11
# Cumulative Bar Plot for Total Working Population across Various Industries for Each Age Group and District

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

industry_mapping = [
    'A1- Total', 'A2- Total', 'A3- Total', 'B- Total', 'C1- Total', 'C2- Total', 'D- Total', 'E-Total',
    'F1- Total', 'F2- Total', 'G- Total', 'H- Total', 'I1- Total', 'I2- Total', 'J- Total', 'K- Total', 'L- Total',
    'M1- Total', 'M2- Total'
]

# Define the age groups
age_groups = ['5-9', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40-49', '50-59', '60-69', '70-79', '80+']

# Create an empty DataFrame to store the cumulative population data
cumulative_population_df = pd.DataFrame()

# Loop over each district
for dist in District_df['Area Name']:
    census_tables = df[df['Area Name'] == dist].copy()
    census_tables.drop(columns=['District Code'], inplace=True)

    # Filter data for the total working population
    total_population_data = census_tables[census_tables['Total/ Rural/ Urban'] != 'Rural']
    total_population_data = total_population_data[total_population_data['Total/ Rural/ Urban'] != 'Urban']
    drop_columns=['Total Workers', 'Total Male Workers', 'Total Female Workers',
                           'A1- Male', 'A1- Female',  'A2- Male',
                          'A2- Female',
                           'A3- Male', 'A3- Female',  'B- Male',
                          'B- Female',  'C1- Male', 'C1- Female', 'C2- Male', 'C2- Female',
                          'D- Male', 'D- Female', 'E- Male', 'E- Female',  'F1- Male', 'F1- Female',
                           'F2- Male', 'F2- Female', 'G- Male',
                          'G- Female',  'H- Male', 'H- Female',
                          'I1- Male', 'I1- Female',  'I2- Male', 'I2- Female',
                           'J- Male', 'J- Female',  'K- Male', 'K- Female',
                           'L- Male', 'L- Female',  'M1- Male',
                          'M1- Female',  'M2- Male', 'M2- Female','Total/ Rural/ Urban','Age group','Area Name']

    # Loop over each age group
    for age in age_groups:
        # Update the cumulative count column
      age_group_data = total_population_data[total_population_data['Age group'] == age]
      age_group_data.drop(columns=drop_columns,axis=1,inplace=True)


    #age_group_data.drop(columns='index',axis=1,inplace=True)
      age_group_data.columns.name='Work Population'

      #print(age_group_data)
      age_group_data=age_group_data.unstack()
      age_group_data = age_group_data.reset_index()
      age_group_data['Cummulative']=age_group_data.iloc[:,2].cumsum()


      #Plotting
      plt.figure(figsize=(10, 6))
      sns.barplot(x=age_group_data['Work Population'], y=age_group_data['Cummulative'])
      plt.title(f'Cumulative Bar Plot of Total Working Population for {age} Group in {dist}')
      plt.xlabel('Industry')
      plt.ylabel('Cumulative Population')
      plt.xticks(rotation=45, ha='right')
      plt.show()

    #print(age_group_data)

# Task 13
# Industry trends in each district
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
industry_mapping={'A1- Total':'Cultivators','A2- Total':'Agricultural Labours','A3- Total':'Plantation Livestock and Fishing',  'B- Total':'Mining and Quarying Industry',
                    'C1- Total':'HHI Manufacturing Industry', 'C2- Total':'Non-HHI Manufacturing Industry', 'D- Total':'Electricity, Gas and Water Supply, Sewage Management Sector',
                    'E-Total':'Construction Industry','F1- Total':'HHI Wholesale and Retail Trade Sector', 'F2- Total':'Non-HHI Wholesale and Retail Trade Sector',
                    'G- Total':'Transportation and Storage Industry','H- Total':'Accomodation and Food Service Sector',  'I1- Total':'HHI Information and Communication Sector',
  'I2- Total':'HHI Information and Communication Sector', 'J- Total':'Financial,Real Estate and Insurance Sector', 'K- Total':'Public Administration, Support and Defence',
                    'L- Total':'Education Human Health and NGO', 'M1- Total':'HHI Art, Entertainment and Recreation','M2- Total':'Non-HHI Art, Entertainment and Recreation' }
columns_to_be_analysed=[ 'A1- Total',  'A2- Total', 'A3- Total',  'B- Total', 'C1- Total',  'C2- Total',
 'D- Total',  'E-Total', 'F1- Total',
       'F2- Total', 'G- Total',  'H- Total', 'I1- Total',
      'I2- Total',
       'J- Total',  'K- Total',
       'L- Total',  'M1- Total', 'M2- Total']
largest_industry_list=[]
for dist in District_df['Area Name']:
   census_tables = df[df['Area Name'] == dist].copy()
   census_tables.drop(columns=['District Code'],inplace=True)
   pivot_table1=census_tables.pivot_table(index='Age group', values=columns_to_be_analysed,margins=True,aggfunc=np.sum)
   print(pivot_table1.head(20))
   #pivot_table1=pivot_table1.reset_index().unstack()
   #print(pivot_table1.head(20))
   max_value = pivot_table1.loc['All'].max()

# Find the column name associated with the maximum value
   column_name = pivot_table1.loc['All'].idxmax()

   print(f"Max Value in Row  {max_value}")
   print(f"Column Name: {column_name}")

   largest_industry_list.append(column_name)

for x,y in zip(District_df['Area Name'],largest_industry_list):
  print(f'District {x}: Largest industry {industry_mapping[y]}')


data = {'District': District_df['Area Name'], 'Largest_Industry': largest_industry_list}
df_largest_industry = pd.DataFrame(data)

# Count the occurrences of each industry in the DataFrame
industry_counts = df_largest_industry['Largest_Industry'].value_counts()

# Plot a bar chart
plt.figure(figsize=(12, 8))
industry_counts.plot(kind='bar', color='skyblue')
plt.title(' Industry Trends of the State')
plt.xlabel('Largest Industry')
plt.ylabel('Count')

# Update x-axis labels using industry_mapping
industry_labels = [industry_mapping[industry] for industry in industry_counts.index]
plt.xticks(ticks=np.arange(len(industry_labels)), labels=industry_labels, rotation=45, ha='right')

plt.tight_layout()
plt.show()